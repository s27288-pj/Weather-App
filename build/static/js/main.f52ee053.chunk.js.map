{"version":3,"sources":["index.js"],"names":["isDarkMode","window","onload","localStorage","getItem","document","body","classList","toggle","setItem","apiKey","process","REACT_APP_OPENWEATHERMAPAPI","mapboxToken","REACT_APP_MAPBOXTOKEN","async","getLocationSuggestions","query","response","fetch","concat","json","features","map","feature","place_name","coordinates","center","selectLocation","placeName","longitude","latitude","weatherData","getWeatherData","forecastData","getForecastData","displayCurrentWeather","displayForecastData","getElementById","value","innerHTML","error","console","weather","main","temp","feels_like","pressure","humidity","style","display","forecast","forecastDataElement","list","forEach","item","dateTime","Date","dt","day","getDate","toString","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","formattedDate","formattedTime","row","forecastTitle","forecastTable","searchWeatherOnClick","locationInput","length","then","suggestions","catch","setTimeout","test","navigator","userAgent","konamiCode","konamiCodeIndex","inputField","addEventListener","suggestionsList","suggestion","listItem","createElement","textContent","onclick","appendChild","displayLocationSuggestions","querySelector","event","key","alert","checkKonamiCode"],"mappings":"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","file":"static/js/main.f52ee053.chunk.js","sourcesContent":["let isDarkMode = false;\n\nfunction toggleMode() {\n  const body = document.body;\n  body.classList.toggle('dark-mode');\n  isDarkMode = !isDarkMode;\n\n  // Save user preference to localStorage\n  localStorage.setItem('darkMode', isDarkMode);\n}\n\n// Check user preference in localStorage on page load\nwindow.onload = function () {\n  const userPrefersDark = localStorage.getItem('darkMode') === 'true';\n\n  if (userPrefersDark) {\n    toggleMode();\n  }\n};\n\nconst apiKey = process.env.REACT_APP_OPENWEATHERMAPAPI;\nconst mapboxToken = process.env.REACT_APP_MAPBOXTOKEN;\n\n// Function to fetch location suggestions from MapBox API\nasync function getLocationSuggestions(query) {\n  const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?access_token=${mapboxToken}`);\n  const data = await response.json();\n  return data.features.map(feature => {\n    return {\n      place_name: feature.place_name,\n      coordinates: feature.center\n    };\n  });\n}\n\n// Function to display location suggestions\nfunction displayLocationSuggestions(suggestions) {\n  const suggestionsList = document.getElementById('suggestions-list');\n  suggestionsList.innerHTML = '';\n\n  suggestions.forEach(suggestion => {\n    const listItem = document.createElement('li');\n    listItem.textContent = suggestion.place_name;\n    listItem.onclick = () => selectLocation(suggestion.coordinates, suggestion.place_name);\n    suggestionsList.appendChild(listItem);\n  });\n}\n\n// Function to handle the selection of a location from suggestions\nasync function selectLocation(coordinates, placeName) {\n  const [longitude, latitude] = coordinates; // Correctly extract latitude and longitude\n\n  try {\n    const weatherData = await getWeatherData(latitude, longitude);\n    const forecastData = await getForecastData(latitude, longitude);\n  \n    displayCurrentWeather(weatherData);\n    displayForecastData(forecastData);\n\n    // Set selected suggestion to the input box\n    const locationInput = document.getElementById('location-input');\n    locationInput.value = `${placeName}`;\n\n    // Clear suggestions list from the DOM\n    const suggestionsList = document.getElementById('suggestions-list');\n    suggestionsList.innerHTML = '';\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    // Handle error - for example, display an error message to the user\n  }\n}\n\n// Function to handle user input for location autocomplete\nasync function handleInput() {\n  const locationInput = document.getElementById('location-input').value;\n  if (locationInput.length > 0) {\n    const suggestions = await getLocationSuggestions(locationInput);\n    displayLocationSuggestions(suggestions);\n  } else {\n    const suggestionsList = document.getElementById('suggestions-list');\n    suggestionsList.innerHTML = '';\n  }\n}\n\n// Function to fetch weather data from OpenWeatherMap API\nasync function getWeatherData(latitude, longitude) {\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`);\n  const data = await response.json();\n  return data;\n}\n\n// Function to fetch forecast data from OpenWeatherMap API\nasync function getForecastData(latitude, longitude) {\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`);\n  const data = await response.json();\n  return data;\n}\n\n// Function to display current weather\nfunction displayCurrentWeather(weather) {\n  const currentWeatherElement = document.getElementById('current-weather');\n  currentWeatherElement.innerHTML = `\n    <p>Temperature: ${weather.main.temp}°C</p>\n    <p>Feels Like: ${weather.main.feels_like}°C</p>\n    <p>Pressure: ${weather.main.pressure} hPa</p>\n    <p>Humidity: ${weather.main.humidity}%</p>\n  `;\n\n  // Display the current weather title\n  const currentWeatherTitle = document.getElementById('current-weather-title');\n  currentWeatherTitle.style.display = 'block';\n}\n\n// Function to display forecast data in a table\nfunction displayForecastData(forecast) {\n  const forecastDataElement = document.getElementById('forecast-data');\n  forecastDataElement.innerHTML = '';\n\n  forecast.list.forEach(item => {\n    const dateTime = new Date(item.dt * 1000);\n    const day = dateTime.getDate().toString().padStart(2, '0'); // Get day (two digits)\n    const month = (dateTime.getMonth() + 1).toString().padStart(2, '0'); // Get month (two digits)\n    const year = dateTime.getFullYear(); // Get year\n    const hours = dateTime.getHours().toString().padStart(2, '0'); // Get hours (24-hour format)\n    const minutes = dateTime.getMinutes().toString().padStart(2, '0'); // Get minutes (two digits)\n    \n    const formattedDate = `${day}/${month}/${year}`;\n    const formattedTime = `${hours}:${minutes}`;\n    \n    const row = `\n      <tr>\n        <td>${formattedDate} ${formattedTime}</td>\n        <td>${item.main.temp}°C</td>\n        <td>${item.main.feels_like}°C</td>\n        <td>${item.main.pressure} hPa</td>\n        <td>${item.main.humidity}%</td>\n      </tr>\n    `;\n    forecastDataElement.innerHTML += row;\n  });\n  // Display the forecast title and table\n  const forecastTitle = document.getElementById('forecast-title');\n  const forecastTable = document.getElementById('forecast-table');\n  forecastTitle.style.display = 'block';\n  forecastTable.style.display = 'table';\n}\n\n// Function to handle the search and retrieve weather data\nasync function searchWeather() {\n  const locationInput = document.getElementById('location-input').value;\n  \n  // Fetch coordinates using MapBox geocoding API\n  const mapboxResponse = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${locationInput}.json?access_token=${mapboxToken}`);\n  const mapboxData = await mapboxResponse.json();\n  const coordinates = mapboxData.features[0].center;\n\n  const latitude = coordinates[1];\n  const longitude = coordinates[0];\n  \n  const weatherData = await getWeatherData(`${latitude},${longitude}`);\n  const forecastData = await getForecastData(`${latitude},${longitude}`);\n  \n  displayCurrentWeather(weatherData);\n  displayForecastData(forecastData);\n}\n\n// Function to handle search when button is clicked or Enter is pressed\nfunction searchWeatherOnClick() {\n  const locationInput = document.getElementById('location-input').value;\n\n  if (locationInput.length > 0) {\n    // Fetch suggestions from MapBox API\n    getLocationSuggestions(locationInput)\n      .then(suggestions => {\n        if (suggestions.length > 0) {\n          const coordinates = suggestions[0].coordinates;\n          const placeName = suggestions[0].place_name;\n          selectLocation(coordinates, placeName);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching location suggestions:', error);\n        // Handle error - for example, display an error message to the user\n      });\n  }\n}\n\nfunction displayPopupOnDesktop() {\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  if (!isMobile) {\n    const popup = document.getElementById('popup');\n    popup.style.display = 'block';\n  }\n}\n\n// Function to close the popup\nfunction closePopup() {\n  const popup = document.getElementById('popup');\n  popup.style.display = 'none';\n}\n\n// Set timeout to display the popup after 20 seconds for desktop devices\nsetTimeout(displayPopupOnDesktop, 5000); // 20 seconds in milliseconds \n// TODO: Change to 20 seconds\n\nconst konamiCode = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'b', 'a'];\nlet konamiCodeIndex = 0;\n\nfunction checkKonamiCode(event) {\n  const key = event.key;\n  const requiredKey = konamiCode[konamiCodeIndex];\n\n  if (key === requiredKey) {\n    konamiCodeIndex++;\n\n    if (konamiCodeIndex === konamiCode.length) {\n      // Konami code successfully entered, perform action (e.g., show an Easter egg)\n      alert('Konami code activated! 🎉');\n      konamiCodeIndex = 0; // Reset index for next entry\n    }\n  } else {\n    konamiCodeIndex = 0; // Reset index if wrong key is pressed\n  }\n}\n\n// Attach an event listener to the input field for real-time suggestions\nconst inputField = document.getElementById('location-input');\ninputField.addEventListener('input', handleInput);\n\nconst searchButton = document.querySelector('button');\nsearchButton.addEventListener('click', searchWeatherOnClick);\n\n// Handle Enter key press\ninputField.addEventListener('keypress', function(event) {\n  if (event.key === 'Enter') {\n    searchWeatherOnClick();\n  }\n});\n\n// Event listener for key presses\ndocument.addEventListener('keydown', function(event) {\n  if (event.key === 'Escape') {\n    konamiCodeIndex = 0; // Reset index if Escape key is pressed\n  } else {\n    checkKonamiCode(event);\n  }\n});\n"],"sourceRoot":""}